package com.holmes.projecteuler.problem;

/**
 * <h1><a href="https://projecteuler.net/problem=2">Even Fibonacci Numbers</a></h1>
 * <h2>Problem 2</h2>
 *
 * <p>
 * Each new term in the Fibonacci sequence is generated by adding the previous two terms.
 * By starting with 1 and 2, the first 10 terms will be: 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
 * </p>
 *
 * <p>
 * By considering the terms in the Fibonacci sequence whose values do not exceed four million,
 * find the sum of the even-valued terms.
 * </p>
 *
 * @author Alex
 * @since 07-01-2024
 */
public class Problem2 implements ProjectEulerProblem<Integer, Integer> {

    /**
     * @param question The total value limit of the fibonacci sequence,
     *                 i.e. the first 5 terms of fib is 1, 2, 3, 5, 8, with a total of 19
     *                 and so a limit of 20 will mean only 5 terms of fib will be used for the calculation.
     * @return The total value of only even terms. i.e. if a limit of 20 is given, the first 5 terms will be
     * used (1, 2, 3, 5, 8) with 2 and 8 being the only even values meaning a total even value will result in 10.
     */
    @Override
    public Integer solve(Integer question) {
        return fib(question);
    }

    private Integer fib(Integer limit) {
        int prev = 1;
        int now = 2;
        int evenTotal = 0;

        System.out.printf("%d, ", prev);
        while (now < limit) {
            System.out.printf("%d, ", now);

            if(now % 2 == 0) {
                evenTotal += now;
            }

            int newNow = prev + now;
            prev = now;
            now = newNow;
        }

        return evenTotal;
    }
}
